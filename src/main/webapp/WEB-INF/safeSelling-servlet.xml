<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/mvc
   http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<context:component-scan base-package="com.org.safeSelling" />
	<context:component-scan base-package="com.org.safeSelling.config" />
	<context:component-scan base-package="com.org.safeSelling.data" />
	<context:component-scan base-package="com.org.safeSelling.web" />
	<context:component-scan base-package="com.org.safeSelling.api" />
	<context:component-scan base-package="com.org.safeSelling.management" />
	<context:component-scan base-package="com.org.safeSelling.siteAspects" />
	
	<!-- Not adding this bean will result in always getting your file as NULL 
		This bean is required if you are using Spring multipart resolver and will 
		work only with servlet 3.0 and spring 3.1 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.support.StandardServletMultipartResolver"></bean>

	<!-- This is working now trying something different This will be used if 
		we wish to serve content just from the application context <mvc:resources 
		mapping="/resources/**" location="/META-INF/public-web-resources/" /> The 
		below mapping will let us serve content which is outside of the application 
		context -->
	<mvc:resources mapping="/resources/**" location="file:\E:\siteImages\" />

	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="jsonMessageConverter" />
			</list>
		</property>
	</bean>

	<!-- Configure bean to convert JSON to POJO and vice versa -->
	<bean id="jsonMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	</bean>

	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename">
			<value>safeSelling.messages.displayMessage</value>
		</property>
	</bean>
	<!-- 
	<context:mbean-export server="mbeanServer"></context:mbean-export> -->
	<!-- <mvc:annotation-driven /> <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/> 
		<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<property name="prefix" value="/WEB-INF/views/" /> <property name="suffix" 
		value=".jsp" /> </bean> -->
</beans>